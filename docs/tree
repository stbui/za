import React, { useState } from 'react';
import { Icon } from 'antd';
import styled from 'styled-components';

const StyledIcon = styled(Icon)`
    visibility: ${({ child }) => (child ? 'visible' : 'hidden')};
    padding-right: 4px;
`;

const StyledTitle = styled.div`
    display: flex;
    align-items: center;
    padding: 0 12px;
    border-radius: 4px;
    line-height: 44px;
    height: 44px;

    ${({ selected }) => selected
        && ` background: rgba(0, 188, 112, 0.1);
    color: #00bc70;`}
`;

const FlexAuto = styled.div`
    flex: auto;
`;

export const TreeNode = ({ children, title, onChange, selected, expanded, onSelect, onExpand }) => {
  console.log(selected, expanded);
  return (
        <div>
            <StyledTitle selected={selected}>
                <StyledIcon type="caret-down" rotate={expanded ? 0 : -90} child={children} onClick={onExpand} />
                <FlexAuto onClick={onSelect}>{title}</FlexAuto>
                <span style={{ flex: 'auto' }} />
            </StyledTitle>
            {expanded ? <div>{children}</div> : null}
        </div>
  );
};

export const Tree = ({ children, defaultActive, onChange }) => {
  const [expandKeys, setExpand] = useState([]);
  const [selectKeys, setSelectKeys] = useState([]);

  const onExpand = (key) => {
    const index = expandKeys.indexOf(key);
    if (index > -1) {
      setExpand([]);
    } else {
      setExpand((prevState) => [key]);
    }
  };
  const onSelect = (key) => {
    setSelectKeys((prevState) => [key]);
  };

  const getNodeProps = (key) => {
    return {
      root: this,
      expanded: expandKeys.indexOf(key) > -1,
      selected: selectKeys.indexOf(key) > -1,
      onChange: () => onExpand(key),
      onExpand: () => onExpand(key),
      onSelect: () => onSelect(key),
    };
  };

  const renderByChidren = () => {
    const loop = (children, prefix = '0') => {
      return React.Children.map(children, (child, index) => {
        if (!React.isValidElement(child)) {
          return;
        }

        const pos = `${prefix}-${index}`;
        const key = child.key || pos;

        const props = getNodeProps(key);

        if (child.props.children) {
          props.children = loop(child.props.children, pos);
        }

        const node = React.cloneElement(child, props);

        return node;
      });
    };

    return loop(children);
  };

  return <div>{renderByChidren()}</div>;
};

export default () => {
  return (
        <Tree>
            <TreeNode title="1" key="0-0"></TreeNode>
            <TreeNode title="2" key="0-1"></TreeNode>
            <TreeNode title="3" key="0-2"></TreeNode>
            <TreeNode title="4" key="0-3">
                <TreeNode title="41" key="0-0-1"></TreeNode>
                <TreeNode title="42" key="0-0-2"></TreeNode>
            </TreeNode>
        </Tree>
  );
};
